{"version":3,"file":"ActiveRelations-G792U_7i.js","sources":["../../../src/views/main/Page/sub/PageRelations/components/ActiveRelationsCard.vue","../../../src/views/main/Page/sub/PageRelations/ActiveRelations.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { computed, ref } from \"vue\";\nimport { usePageRelationStore } from \"@user-web/stores/modules/page/relation\";\nimport { useI18n } from \"vue-i18n\";\nimport { usePageStore } from \"@user-web/stores/modules/page\";\nimport type { ListComponent } from \"@components-lib/types\";\nimport type { CityRelation, PageRelation } from \"types/models/relation\";\nimport PageOrCityInfoCard from \"@components-lib/components/Card/PageOrCityInfoCard.vue\";\nimport { CityPaths, PagePaths, UserWebPathQueryParams } from \"@enums/routes/user-web.routes\";\nimport { RelationScopeTypes } from \"@enums/relation.enum\";\nimport { getTranslationArrayAsString } from \"@utils/translations\";\nimport { ButtonTypesEnum } from \"@components-lib/enums\";\nimport { LanguageLocales } from \"@enums/languages.enum\";\nimport { GeneralEmitEvents } from \"@enums/emit-event.enum\";\nimport type { PaginationResponseMetaData } from \"types/common/pagination\";\n\nconst props = defineProps<{\n  type: RelationScopeTypes;\n  relations: (CityRelation | PageRelation)[];\n  pagination: PaginationResponseMetaData | null;\n  isLoading: boolean;\n}>();\n\nconst emit = defineEmits<{\n  (e: GeneralEmitEvents.EXPAND);\n}>();\n\nconst { t, locale } = useI18n();\nconst pageStore = usePageStore();\nconst relationsStore = usePageRelationStore();\n\nconst { CITY } = RelationScopeTypes;\n\nconst listElement = ref<ListComponent>();\n\nconst emptyStateTexts = computed(() => {\n  const itemText =\n    props.type === CITY\n      ? t(\"global.city\")\n      : t(\"global.page\", locale.value === LanguageLocales.EN ? 1 : 2);\n\n  const titleText = t(\"generics.no_active_item_relations\", { item: itemText });\n\n  const disclaimerText = pageStore.canAdministrateCurrentPage\n    ? props.type === CITY\n      ? t(\"global.relation_empty_state_disclaimer_city\")\n      : t(\"global.relation_empty_state_disclaimer_page\")\n    : \"\";\n\n  const buttonText = pageStore.canAdministrateCurrentPage\n    ? t(\"generics.form_item_relations\", { item: itemText })\n    : \"\";\n\n  return {\n    titleText,\n    disclaimerText,\n    buttonText,\n  };\n});\nfunction getItemName(item: CityRelation | PageRelation) {\n  return (item as CityRelation).name ?? (item as PageRelation).name;\n}\n\nconst generateRoute = (type: RelationScopeTypes, item: CityRelation | PageRelation) => {\n  if (type === RelationScopeTypes.PAGE) {\n    return {\n      name: PagePaths.HOME[1],\n      params: {\n        [UserWebPathQueryParams.PAGE]: item._id,\n      },\n    };\n  }\n\n  return {\n    name: CityPaths.CITY[1],\n    params: { [UserWebPathQueryParams.CITY]: (item as CityRelation).slug },\n  };\n};\n</script>\n\n<template>\n  <div class=\"d-flex flex-direction-column gap-4\">\n    <div class=\"align-items-center d-flex gap-3 text-5 text-regular\">\n      {{ t(`global.${type}`, 2) }}\n    </div>\n\n    <SkeletonLoader\n      v-if=\"relationsStore.isRelationsDataLoading\"\n      class=\"d-flex flex-direction-column gap-7 mx-0-sm mx-5\"\n    >\n      <SkeletonRectangle :amount=\"4\" />\n    </SkeletonLoader>\n\n    <Card v-else-if=\"relations?.length\" class=\"overflow-hidden\">\n      <List ref=\"listElement\">\n        <ListItem v-for=\"(item, index) in relations\" :key=\"index\">\n          <PageOrCityInfoCard\n            :title=\"getItemName(item)\"\n            :categories=\"getTranslationArrayAsString((item as PageRelation).categories, locale)\"\n            :to=\"generateRoute(type, item)\"\n            :image-props=\"{ src: item.profileImage?.modified }\"\n            class=\"p-5\"\n          >\n            <template #actions>\n              <Button\n                v-if=\"pageStore.canAdministrateCurrentPage\"\n                icon=\"trash_can\"\n                :button-type=\"ButtonTypesEnum.TEXT\"\n                text-classes=\"d-none d-block-md\"\n                @click.prevent=\"relationsStore.openDeleteRelation(item._id, item.name, type)\"\n              >\n                {{ t(\"generics.delete_item\", { item: t(\"global.relation\") }) }}\n              </Button>\n            </template>\n          </PageOrCityInfoCard>\n        </ListItem>\n\n        <ListItem v-if=\"isLoading\" class=\"d-flex flex-direction-column gap-7 p-5\">\n          <SkeletonRectangle :amount=\"2\" />\n        </ListItem>\n      </List>\n      <CardFooter\n        v-if=\"pagination?.nextUrl && !isLoading\"\n        class=\"align-items-center d-flex p-5\"\n        :divider=\"false\"\n      >\n        <Button\n          :button-type=\"ButtonTypesEnum.TEXT\"\n          class=\"m-auto\"\n          @click=\"emit(GeneralEmitEvents.EXPAND)\"\n        >\n          {{ t(\"global.show_more\") }}\n        </Button>\n      </CardFooter>\n    </Card>\n\n    <EmptyStateCard\n      v-else\n      :icon=\"type === CITY ? 'city' : 'page'\"\n      :body-title=\"emptyStateTexts.titleText\"\n      :text=\"emptyStateTexts.disclaimerText\"\n      :add-button=\"emptyStateTexts.buttonText\"\n      @click-add-button=\"relationsStore.addRelation(type)\"\n    />\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.relation-image {\n  width: var(--ct-spacing_10);\n  aspect-ratio: 1;\n}\n</style>\n","<script setup lang=\"ts\">\nimport { computed, onMounted, ref } from \"vue\";\nimport { usePageRelationStore } from \"@user-web/stores/modules/page/relation\";\nimport ActiveRelationsCard from \"@user-web/views/main/Page/sub/PageRelations/components/ActiveRelationsCard.vue\";\nimport { usePageStore } from \"@user-web/stores/modules/page\";\nimport { useHead } from \"@unhead/vue\";\nimport { RelationPaginationStatus, RelationScopeTypes } from \"@enums/relation.enum\";\n\nconst relationsStore = usePageRelationStore();\nconst pageStore = usePageStore();\n\nconst areMorePagesLoading = ref(false);\nconst areMoreCitiesLoading = ref(false);\n\nuseHead({\n  title: computed(() => `${pageStore.currentPage?.name}`),\n});\n\nconst cities = computed(() =>\n  pageStore.canAdministrateCurrentPage\n    ? relationsStore.relations.cities.active\n    : relationsStore.relations.cities.activePublic\n);\nconst pages = computed(() =>\n  pageStore.canAdministrateCurrentPage\n    ? relationsStore.relations.pages.active\n    : relationsStore.relations.pages.activePublic\n);\nconst citiesPagination = computed(() =>\n  pageStore.canAdministrateCurrentPage\n    ? relationsStore.pagination.cities.active\n    : relationsStore.pagination.cities.activePublic\n);\nconst pagesPagination = computed(() =>\n  pageStore.canAdministrateCurrentPage\n    ? relationsStore.pagination.pages.active\n    : relationsStore.pagination.pages.activePublic\n);\n\nconst relationPaginationStatus = computed(() =>\n  pageStore.canAdministrateCurrentPage\n    ? RelationPaginationStatus.ACTIVE\n    : RelationPaginationStatus.ACTIVE_PUBLIC\n);\nasync function loadMoreCities() {\n  areMoreCitiesLoading.value = true;\n  await relationsStore.loadMoreRelationsByStatusAndScope(\n    RelationScopeTypes.CITY,\n    relationPaginationStatus.value,\n    citiesPagination.value?.nextUrl\n  );\n  areMoreCitiesLoading.value = false;\n}\n\nasync function loadMorePages() {\n  areMorePagesLoading.value = true;\n  await relationsStore.loadMoreRelationsByStatusAndScope(\n    RelationScopeTypes.PAGE,\n    relationPaginationStatus.value,\n    pagesPagination.value?.nextUrl\n  );\n  areMorePagesLoading.value = false;\n}\n\nonMounted(async () => {\n  if (typeof pageStore.currentPage?._id === \"string\") {\n    await Promise.all([\n      relationsStore.getActivePublicCityRelations(pageStore.currentPage?._id),\n      relationsStore.getActivePublicPageRelations(pageStore.currentPage?._id),\n    ]);\n  }\n});\n</script>\n\n<template>\n  <div class=\"d-flex flex-direction-column gap-7 mx-0-sm mx-5\">\n    <ActiveRelationsCard\n      :type=\"RelationScopeTypes.CITY\"\n      :relations=\"cities\"\n      :pagination=\"citiesPagination\"\n      :is-loading=\"areMoreCitiesLoading\"\n      @expand=\"loadMoreCities\"\n    />\n    <ActiveRelationsCard\n      :type=\"RelationScopeTypes.PAGE\"\n      :relations=\"pages\"\n      :pagination=\"pagesPagination\"\n      :is-loading=\"areMorePagesLoading\"\n      @expand=\"loadMorePages\"\n    />\n  </div>\n</template>\n"],"names":["t","locale","useI18n","pageStore","usePageStore","relationsStore","usePageRelationStore","CITY","RelationScopeTypes","listElement","ref","emptyStateTexts","computed","itemText","props","LanguageLocales","titleText","disclaimerText","buttonText","getItemName","item","generateRoute","type","PagePaths","UserWebPathQueryParams","CityPaths","areMorePagesLoading","areMoreCitiesLoading","useHead","cities","pages","citiesPagination","pagesPagination","relationPaginationStatus","RelationPaginationStatus","loadMoreCities","loadMorePages","onMounted"],"mappings":"uqBA2BA,CAAA,EAAAA,EAAA,OAAAC,CAAA,EAAAC,EAAA,EACAC,EAAAC,IACAC,EAAAC,IAEA,CAAA,KAAAC,CAAA,EAAAC,EAEAC,EAAAC,IAEAC,EAAAC,EAAA,IAAA,CACE,MAAAC,EAAAC,EAAA,OAAAP,EAAAP,EAAA,aAAA,EAAAA,EAAA,cAAAC,EAAA,QAAAc,EAAA,GAAA,EAAA,CAAA,EAKAC,EAAAhB,EAAA,oCAAA,CAAA,KAAAa,CAAA,CAAA,EAEAI,EAAAd,EAAA,2BAAAW,EAAA,OAAAP,EAAAP,EAAA,6CAAA,EAAAA,EAAA,6CAAA,EAAA,GAMAkB,EAAAf,EAAA,2BAAAH,EAAA,+BAAA,CAAA,KAAAa,EAAA,EAAA,GAIA,MAAA,CAAO,UAAAG,EACL,eAAAC,EACA,WAAAC,CACA,CACF,CAAA,EAEF,SAAAC,EAAAC,EAAA,CACE,OAAAA,EAAA,MAAAA,EAAA,IAA6D,CAG/D,MAAAC,EAAA,CAAAC,EAAAF,IACEE,IAAAd,EAAA,KACE,CAAO,KAAAe,EAAA,KAAA,CAAA,EACiB,OAAA,CACd,CAAAC,EAAA,IAAA,EAAAJ,EAAA,GAC8B,CACtC,EAIJ,CAAO,KAAAK,EAAA,KAAA,CAAA,EACiB,OAAA,CAAA,CAAAD,EAAA,IAAA,EAAAJ,EAAA,IAAA,CAC+C,g0DCnEzE,MAAAf,EAAAC,IACAH,EAAAC,IAEAsB,EAAAhB,EAAA,EAAA,EACAiB,EAAAjB,EAAA,EAAA,EAEAkB,GAAA,CAAQ,MAAAhB,EAAA,IAAA,GAAAT,EAAA,aAAA,IAAA,EAAA,CACgD,CAAA,EAGxD,MAAA0B,EAAAjB,EAAe,IAAAT,EAAA,2BAAAE,EAAA,UAAA,OAAA,OAAAA,EAAA,UAAA,OAAA,YAGuB,EAEtCyB,EAAAlB,EAAc,IAAAT,EAAA,2BAAAE,EAAA,UAAA,MAAA,OAAAA,EAAA,UAAA,MAAA,YAGuB,EAErC0B,EAAAnB,EAAyB,IAAAT,EAAA,2BAAAE,EAAA,WAAA,OAAA,OAAAA,EAAA,WAAA,OAAA,YAGc,EAEvC2B,EAAApB,EAAwB,IAAAT,EAAA,2BAAAE,EAAA,WAAA,MAAA,OAAAA,EAAA,WAAA,MAAA,YAGc,EAGtC4B,EAAArB,EAAiC,IAAAT,EAAA,2BAAA+B,EAAA,OAAAA,EAAA,aAGF,EAE/B,eAAAC,GAAA,CACER,EAAA,MAAA,GACA,MAAAtB,EAAA,kCAAqBG,EAAA,KACAyB,EAAA,MACMF,EAAA,OAAA,OACD,EAE1BJ,EAAA,MAAA,EAA6B,CAG/B,eAAAS,GAAA,CACEV,EAAA,MAAA,GACA,MAAArB,EAAA,kCAAqBG,EAAA,KACAyB,EAAA,MACMD,EAAA,OAAA,OACF,EAEzBN,EAAA,MAAA,EAA4B,CAG9B,OAAAW,GAAA,SAAA,CACE,OAAAlC,EAAA,aAAA,KAAA,UACE,MAAA,QAAA,IAAA,CAAkBE,EAAA,6BAAAF,EAAA,aAAA,GAAA,EACsDE,EAAA,6BAAAF,EAAA,aAAA,GAAA,CACA,CAAA,CAE1E,CAAA"}